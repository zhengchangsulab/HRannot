#!/usr/bin/env python
import re,argparse,textwrap
parser=argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-g','--genome',type=str,metavar='',required=True,help=textwrap.dedent('Required\nTarget assembled genome'))
parser.add_argument('-c','--CDS',type=str,metavar='',required=True,help=textwrap.dedent('Required\nHomology CDS isoforms and their corresponding genesâ€™ name'))
parser.add_argument('-sh','--splignh',type=str,metavar='',required=True,help=textwrap.dedent('Required\nSplign output from homology CDS'))
parser.add_argument('-sr','--splignR',type=str,metavar='',required=True,help=textwrap.dedent('Required\nSplign output from RNA-seq data'))
parser.add_argument('-ns','--nonsupport',type=str,metavar='',required=True,help=textwrap.dedent('Required\nBed file of the genome region not supported by the high-quality sequencing reads'))
parser.add_argument('-nc','--noncoding',type=str,metavar='',required=True,help=textwrap.dedent('Required\nNon-coding RNAs in the genome'))
parser.add_argument('-l','--minORFlen',type=str,default='300',metavar='',help=textwrap.dedent('Default=300\nMinimum length of the open reading frames identified by RNA-seq data'))
parser.add_argument('-s','--minRNAsco',type=str,default='0.985',metavar='',help=textwrap.dedent('Default=0.985\nMinimum score of Splign output from RNA-seq data'))
args=parser.parse_args()

fp=open('HRannot.sh','w')
fp.write('### Start analyzing the results of splign for ref_based'+'\n')
fp.write('ref.get_best1.py '+args.CDS+' '+args.splignh+'\n')
fp.write('sort -k2,2 -k5,5 -k3,3n best1 > sorted_best1'+'\n')
fp.write('ref.get_best2.py > best2.gff3'+'\n')
fp.write('ref.get_cds.py best2.gff3 '+args.genome+' > cds.fa'+'\n')
fp.write('ref.find_ORF.py'+'\n')
fp.write('awk \'$3==\"gene\"{print $9}\' best2_pseudogene.gff3 > best2_pseudogene'+'\n')
fp.write('cat extend_log.txt | grep -f best2_pseudogene > best2_pseudogene_log'+'\n')
fp.write('grep -v \"notextend\" best2_pseudogene_log > best2_pseudogene_need_extend'+'\n')
fp.write('### Finish analyzing the results of splign for ref_based'+'\n')
fp.write('\n')
fp.write('### Start analyzing the results of splign for RNA_based'+'\n')
fp.write('rna.get_best1.py '+args.splignR+'\n')
fp.write('sort -k2,2 -k5,5 -k3,3n best1 > sorted.best1'+'\n')
fp.write('rna.get_pass.py '+args.minRNAsco+' > best1.pass.sort'+'\n')
fp.write('rna.get_best2.py > rna_based.gff3'+'\n')
fp.write('### Finish analyzing the results of splign for RNA_based'+'\n')
fp.write('\n')
fp.write('### Start getting the ref_based gff3'+'\n')
fp.write('ref.get_best3.py'+'\n')
fp.write('ref.check_extended1.py '+args.genome+' > test'+'\n')
fp.write('ref.get_cds.py test '+args.genome+' > test.fa'+'\n')
fp.write('ref.check_extended2.py > extended_pseudogene.gff3'+'\n')
fp.write('ref.get_cds.py extended_pseudogene.gff3 '+args.genome+' > extended_pseudogene_cds.fa'+'\n')
fp.write('ref.find_ORF1.py'+'\n')
fp.write('cat best2_truegene.gff3 extended_truegene.gff3 > final_truegene.gff3'+'\n')
fp.write('cat pseudogene_part1.gff3 pseudogene_part2.gff3 > final_pseudogene.gff3'+'\n')
fp.write('ref.check_pseudogene.py '+args.nonsupport+' > shortreads_notsupport.pseudogene'+'\n')
fp.write('ref.get_best4.py > ref_based1.gff3'+'\n')
fp.write('ref.get_best5.py'+'\n')
fp.write('### Finish getting the ref_based gff3'+'\n')
fp.write('\n')
fp.write('### Start getting the rna_based_uniq gff3'+'\n')
fp.write('rna.merge_ref_rna.py > rna_uniq.gff3'+'\n')
fp.write('rna.check_non_coding.py '+args.noncoding+' > rna_uniq1.gff3'+'\n')
fp.write('rna.get_cds.py rna_uniq1.gff3 '+args.genome+' > rna_uniq_cds.fa'+'\n')
fp.write('rna.verify_gene.py '+args.minORFlen+'  > rna_uniq_good_orf.fa'+'\n')
fp.write('grep \">\" rna_uniq_good_orf.fa | sed \'s/.//\' > total.support'+'\n')
fp.write('rna.support.get_best2.py > rna_support.gff3'+'\n')
fp.write('rna.support.match_cds.py > rna_support1.gff3'+'\n')
fp.write('rna.support.get_best3.py > rna_support2.gff3'+'\n')
fp.write('rna.support.get_best4.py > rna_support3.gff3'+'\n')
fp.write('### Finish getting the rna_based_uniq gff3'+'\n')
fp.write('\n')
fp.write('### Final protein coding genes and pseudogenes'+'\n')
fp.write('cat ref_true_gene.gff3 rna_support3.gff3 > tobe_check.gff3'+'\n')
fp.write('final.check.py tobe_check.gff3 > final.use.truegene.gff3'+'\n')
fp.write('final.check.py ref_pseudogene.gff3 > final.right.pseudogene.gff3'+'\n')
fp.write('### Finish getting the protein coding genes and pseudogenes'+'\n')
fp.write('\n')
fp.write('### Correct CDS phase using GFF3toolkit'+'\n')
fp.write('gff3_QC -g final.use.truegene.gff3 -f '+args.genome+' -o error.txt -s statistic.txt'+'\n')
fp.write('gff3_fix -qc_r error.txt -g final.use.truegene.gff3 -og final.right.truegene.gff3'+'\n')
fp.write('### Finish correcting CDS phase'+'\n')
fp.write('\n')
fp.write('### Remove unnecessary files'+'\n')
fp.write('rm best2_truegene.gff3 pseudogene_part1.gff3 pseudogene_part2.gff3 ref_pseudogene.gff3 ref_true_gene.gff3 sorted.best1 new_old.name extend_log.txt extended_truegene.gff3 best1 sorted_best1 best2.gff3 cds.fa best2_pseudogene best2_pseudogene_log best2_pseudogene_need_extend best2_pseudogene.gff3 best1.pass.sort rna_based.gff3 test test.fa extended_pseudogene.gff3 extended_pseudogene_cds.fa final_truegene.gff3 final_pseudogene.gff3 shortreads_notsupport.pseudogene ref_based1.gff3 rna_uniq.gff3 rna_uniq1.gff3 rna_uniq_cds.fa rna_uniq_good_orf.fa total.support rna_support.gff3 rna_support1.gff3 rna_support2.gff3 rna_support3.gff3 tobe_check.gff3 error.txt statistic.txt final.use.truegene.gff3'+'\n')
fp.write('### Finish removing unnecessary files'+'\n')
fp.close()
